<!--- COMPONENT ---><cfcomponent displayname="CountryGateway" output="false" hint="I am the CountryGateway class."><!--- Pseudo-constructor ---><cfset variables.instance = {	datasource = ''} /><cffunction name="init" access="public" output="false" returntype="any" hint="I am the constructor method of the CountryGateway class.">  <cfargument name="datasource" type="any" required="true" hint="I am the Datasource bean." />  <!--- Set the initial values of the Bean --->  <cfscript>	variables.instance.datasource = arguments.datasource;  </cfscript>  <cfreturn this></cffunction><!--- PUBLIC METHODS ---><!--- NO FILTER - GET ALL RECORDS ---><cffunction name="getAllCountries" access="public" output="false" returntype="query" hint="I return a query of all records in the countries table in the database.">    <cfset var thisFilter = {	bogus = 'bogus'    } />  <cfreturn filterAllCountries(thisFilter) /></cffunction><!--- FILTER ---><cffunction name="filter" access="public" output="false" returntype="any" hint="I run a query of all records within the database table.">  <cfargument name="country" type="any" required="false" default="" hint="I am the country string to return records for." />  <cfargument name="orderBy" type="any" required="false" default="" hint="I am the column (and optional ordinal ASC or DESC) that records should be ordered by." />  <cfargument name="cache" type="any" required="false" default="false" hint="I am a flag to determine if this query should be cached." />  <cfargument name="cacheTime" type="any" required="false" default="#CreateTimeSpan(0,1,0,0)#" hint="I am timespan to cache this query (Use CreateTimeSpan() or use the default cache time of one hour by not passing this variable." />    <cfset var thisFilter = StructNew() />    <cfif IsDefined('ARGUMENTS.country') AND ARGUMENTS.country NEQ "">		<cfset thisFilter.country = ARGUMENTS.country />    </cfif>    <cfif IsDefined('ARGUMENTS.orderBy') AND ARGUMENTS.orderBy NEQ "">		<cfset thisFilter.order_by = ARGUMENTS.orderBy />    </cfif>    <cfif IsDefined('ARGUMENTS.cache') AND ARGUMENTS.cache NEQ "">		<cfset thisFilter.cache = ARGUMENTS.cache />    </cfif>    <cfif IsDefined('ARGUMENTS.cacheTime') AND ARGUMENTS.cacheTime NEQ "">		<cfset thisFilter.cacheTime = ARGUMENTS.cacheTime />    </cfif>  <cfif NOT structIsEmpty(thisFilter) AND structKeyExists(thisFilter, 'cache') AND thisFilter.cache>    <cfreturn cacheAllCountries(thisFilter) />  <cfelse>    <cfreturn filterAllCountries(thisFilter) />  </cfif></cffunction><!--- PRIVATE METHODS ---><!--- QUERY - CACHE ALL ---><cffunction name="cacheAllCountries" access="private" output="false" returntype="any" hint="I run a query and will return all countries records. If a filter has been applied, I will refine results based on the filter.">  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />  <cfset var cachedQueryName = '' />	<cfloop collection="#ARGUMENTS.filter#" item="thisFilter">		<cfset cachedQueryName = cachedQueryName & thisFilter & ARGUMENTS.filter[thisFilter] />	</cfloop>	<cfset cachedQueryName = Hash(cachedQueryName,'MD5') />	<cfquery name="#cachedQueryName#" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#" cachedwithin="#ARGUMENTS.filter.cacheTime#">		SELECT countryId, country		FROM countries		WHERE 1 = 1  <cfif NOT structIsEmpty(ARGUMENTS.filter)>    <!--- filter is applied --->    <cfif structKeyExists(ARGUMENTS.filter, 'country')>		AND country = <cfqueryparam value="#ARGUMENTS.filter.country#" cfsqltype="cf_sql_varchar" />    </cfif>    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>	ORDER BY #ARGUMENTS.filter.order_by#    </cfif>  </cfif>  </cfquery>  <cfreturn variables[cachedQueryName] /></cffunction><!--- QUERY - FILTER ALL ---><cffunction name="filterAllCountries" access="private" output="false" returntype="any" hint="I run a query and will return all countries records. If a filter has been applied, I will refine results based on the filter.">  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />  <cfset var qGetCountries = '' />  <cfquery name="qGetCountries" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#">		SELECT countryId, country		FROM countries		WHERE 1 = 1  <cfif NOT structIsEmpty(ARGUMENTS.filter)>    <!--- filter is applied --->    <cfif structKeyExists(ARGUMENTS.filter, 'country')>		AND country = <cfqueryparam value="#ARGUMENTS.filter.country#" cfsqltype="cf_sql_varchar" />    </cfif>    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>	ORDER BY #ARGUMENTS.filter.order_by#    </cfif>  </cfif>  </cfquery>  <cfreturn qGetCountries />  </cffunction></cfcomponent>
